{"version":3,"sources":["components/Header/banner.jpg","components/Header/index.js","components/texts/HeadingTwo.js","screens/BussDetailsScreen/index.js","screens/GenDetailsScreen/index.js","screens/HomeScreen/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","style","textAlign","src","banner","alt","width","Component","HeadingTwo","_this$props$data","this","props","data","instanceID","title","className","id","BussDetailsScreen","BussDetailstitle","Fragment","components_texts_HeadingTwo","GenDetailsScreen","GenDetailstitle","HomeScreen","WelcomeTitle","state","showGen","showBus","onClickGen","_this","setState","onClickBus","value","class","onClick","screens_GenDetailsScreen","screens_BussDetailsScreen","App","react_router_dom","components_Header","react_router","exact","path","component","React","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,+QCYzBC,mLAPP,OACIC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACC,UAAU,WACnBJ,EAAAC,EAAAC,cAAA,OAAKG,IAAKC,IAAQC,IAAI,SAASC,MAAM,gBAJhCC,6BCYNC,0LAXJ,IAAAC,EACuBC,KAAKC,MAAMC,KAAjCC,EADDJ,EACCI,WAAYC,EADbL,EACaK,MAEpB,OACEhB,EAAAC,EAAAC,cAAA,OAAKe,UAAU,aAAaC,GAAIH,GAC9Bf,EAAAC,EAAAC,cAAA,UAAKc,WANYP,cCaVU,6MAZXC,iBAAmB,CACfL,WAAY,mBACZC,MAAO,4FAGP,OACIhB,EAAAC,EAAAC,cAACF,EAAAC,EAAMoB,SAAP,KACIrB,EAAAC,EAAAC,cAACoB,EAAD,CAAYR,KAAMF,KAAKQ,2BARPX,aCcjBc,6MAbXC,gBAAkB,CACdT,WAAY,kBACZC,MAAO,2FAGP,OACIhB,EAAAC,EAAAC,cAACF,EAAAC,EAAMoB,SAAP,KACIrB,EAAAC,EAAAC,cAACoB,EAAD,CAAYR,KAAMF,KAAKY,kBACvBxB,EAAAC,EAAAC,cAAA,qCATeO,aC6ChBgB,oNAzCXC,aAAe,CACXX,WAAY,eACZC,MAAO,6BAGTW,MAAQ,CACJC,SAAS,EACTC,SAAS,KAGbC,WAAa,WACTC,EAAKC,SAAS,CACZJ,SAAS,EACTC,SAAS,OAGfI,WAAa,WACXF,EAAKC,SAAS,CACZJ,SAAS,EACTC,SAAS,6EAIX,OACI7B,EAAAC,EAAAC,cAAA,OAAKe,UAAU,aACXjB,EAAAC,EAAAC,cAAA,SACAF,EAAAC,EAAAC,cAACoB,EAAD,CAAYR,KAAMF,KAAKc,gBAEvB1B,EAAAC,EAAAC,cAAA,OAAKe,UAAU,SACXjB,EAAAC,EAAAC,cAAA,SAAOgC,MAAM,kBAAkBC,MAAM,eAAeC,QAASxB,KAAKkB,aAClE9B,EAAAC,EAAAC,cAAA,SAAOgC,MAAM,mBAAmBC,MAAM,eAAeC,QAASxB,KAAKqB,cAEvEjC,EAAAC,EAAAC,cAAA,OAAKe,UAAU,cACTL,KAAKe,MAAMC,QAAU5B,EAAAC,EAAAC,cAACmC,EAAD,MAAuB,KAC5CzB,KAAKe,MAAME,QAAU7B,EAAAC,EAAAC,cAACoC,EAAD,MAAwB,cAnC1C7B,cCgBV8B,mLAfX,OACEvC,EAAAC,EAAAC,cAACsC,EAAA,EAAD,KACExC,EAAAC,EAAAC,cAACF,EAAAC,EAAMoB,SAAP,KACErB,EAAAC,EAAAC,cAACuC,EAAD,MACAzC,EAAAC,EAAAC,cAACwC,EAAA,EAAD,KACE1C,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,WAAWC,UAAWtB,IACxCvB,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,YAAYC,UAAW1B,IACzCnB,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWpB,cAT3BqB,IAAMrC,WCOJsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1a9d246d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/banner.05dacadb.jpg\";","import React, { Component } from 'react';\nimport banner from './banner.jpg'\n\nclass Header extends Component {\n    render(){\n        return(\n            <div style={{textAlign:'center'}}>\n                <img src={banner} alt=\"banner\" width=\"95%\" />\n            </div>\n        );\n    }\n}\nexport default Header;","import React, { Component } from \"react\";\r\nimport \"./HeadingTwo.css\";\r\n\r\nclass HeadingTwo extends Component {\r\n  render() {\r\n    const { instanceID, title } = this.props.data;\r\n\r\n    return (\r\n      <div className=\"HeadingTwo\" id={instanceID}>\r\n        <h2>{title}</h2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HeadingTwo;\r\n","import React, { Component } from 'react';\nimport HeadingTwo from '../../components/texts/HeadingTwo';\n\nclass BussDetailsScreen extends Component {\n    BussDetailstitle = {\n        instanceID: \"BussDetailstitle\",\n        title: \"Business Details\"\n      };\n    render(){\n        return(\n            <React.Fragment>\n                <HeadingTwo data={this.BussDetailstitle} />\n            </React.Fragment>\n        );\n    }\n}\nexport default BussDetailsScreen;","import React, { Component } from 'react';\nimport HeadingTwo from '../../components/texts/HeadingTwo';\n\nclass GenDetailsScreen extends Component {\n    GenDetailstitle = {\n        instanceID: \"GenDetailstitle\",\n        title: \"General Details\"\n      };\n    render(){\n        return(\n            <React.Fragment>\n                <HeadingTwo data={this.GenDetailstitle} />\n                <p>GenDetailsScreen</p>\n            </React.Fragment>\n        );\n    }\n}\nexport default GenDetailsScreen;","import React, { Component } from 'react';\nimport GenDetailsScreen from '../GenDetailsScreen';\nimport { BussDetailsScreen } from '..';\nimport \"./styles.css\"\nimport HeadingOne from '../../components/texts/HeadingTwo';\n\nclass HomeScreen extends Component{\n    WelcomeTitle = {\n        instanceID: \"WelcomeTitle\",\n        title: \"New Vendor Registration\"\n      };\n\n      state = {\n          showGen: true,\n          showBus: false\n      };\n\n      onClickGen = () => {\n          this.setState({\n            showGen: true,\n            showBus: false\n          })\n      };\n      onClickBus = () => {\n        this.setState({\n          showGen: false,\n          showBus: true\n        })\n    };\n    render(){\n        return(\n            <div className=\"outer-div\">\n                <p>\n                <HeadingOne data={this.WelcomeTitle} />\n                </p>\n                <div className=\"panel\">\n                    <input value=\"General Details\" class=\"panel-button\" onClick={this.onClickGen} />\n                    <input value=\"Business Details\" class=\"panel-button\" onClick={this.onClickBus} />\n                </div>\n                <div className=\"grid-outer\">\n                    { this.state.showGen ? <GenDetailsScreen /> : null }\n                    { this.state.showBus ? <BussDetailsScreen /> : null }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default HomeScreen;","import React from 'react';\nimport Header from './components/Header';\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { GenDetailsScreen, BussDetailsScreen, HomeScreen } from \"./screens\"\n\nclass App extends React.Component{\n  render(){\n    return(\n      <Router>\n        <React.Fragment>\n          <Header />\n          <Switch>\n            <Route exact path=\"/general\" component={GenDetailsScreen} />\n            <Route exact path=\"/business\" component={BussDetailsScreen} />\n            <Route exact path=\"/\" component={HomeScreen} />\n          </Switch>\n        </React.Fragment>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}